// <auto-generated />
using System;
using EShop.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EShop.Server.Migrations
{
    [DbContext(typeof(EShopDbContext))]
    [Migration("20210211200604_no_encode_pass")]
    partial class no_encode_pass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("EShop.Server.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WardCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isMain")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WardCode");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EShop.Server.Models.AddressToShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("TEXT");

                    b.Property<string>("WardCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WardCode");

                    b.ToTable("AddressToShips");
                });

            modelBuilder.Entity("EShop.Server.Models.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Attribute");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kích cỡ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chất liệu vải"
                        });
                });

            modelBuilder.Entity("EShop.Server.Models.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttributeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttributeID");

                    b.ToTable("AttributeValue");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            AttributeID = 1,
                            Name = "S"
                        },
                        new
                        {
                            Id = 11,
                            AttributeID = 1,
                            Name = "M"
                        },
                        new
                        {
                            Id = 12,
                            AttributeID = 1,
                            Name = "L"
                        },
                        new
                        {
                            Id = 13,
                            AttributeID = 1,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 14,
                            AttributeID = 1,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 15,
                            AttributeID = 2,
                            Name = "Jean"
                        },
                        new
                        {
                            Id = 16,
                            AttributeID = 2,
                            Name = "Denim"
                        },
                        new
                        {
                            Id = 17,
                            AttributeID = 2,
                            Name = "Len"
                        },
                        new
                        {
                            Id = 18,
                            AttributeID = 2,
                            Name = "Nỉ"
                        });
                });

            modelBuilder.Entity("EShop.Server.Models.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("EShop.Server.Models.Content", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Detail")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaDescriptions")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TopHot")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Warranty")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("EShop.Server.Models.ContentCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaDescriptions")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<long>("ParentID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOnHome")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ContentCategory");
                });

            modelBuilder.Entity("EShop.Server.Models.ContentTag", b =>
                {
                    b.Property<string>("TagID")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long>("ContentID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagID", "ContentID");

                    b.ToTable("ContentTag");
                });

            modelBuilder.Entity("EShop.Server.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EShop.Server.Models.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("StackTrace")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Error");
                });

            modelBuilder.Entity("EShop.Server.Models.ExchangeRateDongA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("banck")
                        .HasColumnType("REAL");

                    b.Property<float>("bantienmat")
                        .HasColumnType("REAL");

                    b.Property<string>("imageurl")
                        .HasColumnType("TEXT");

                    b.Property<float>("muack")
                        .HasColumnType("REAL");

                    b.Property<float>("muatienmat")
                        .HasColumnType("REAL");

                    b.Property<string>("type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRateDongAs");
                });

            modelBuilder.Entity("EShop.Server.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("EShop.Server.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<int>("MenuGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Target")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("EShop.Server.Models.MenuGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MenuGroup");
                });

            modelBuilder.Entity("EShop.Server.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("categoryID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("EShop.Server.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressToShipId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShipEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingDetail")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShippingFee")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddressToShipId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EShop.Server.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("ProductVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVersionId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EShop.Server.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("EShop.Server.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("EShop.Server.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddtitionalInformation")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ApplyPromotion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CatalogID")
                        .HasMaxLength(500)
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deliver")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("SEODescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("SEOTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("SEOUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CatalogID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SEODescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("SEOTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("SEOUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentID");

                    b.ToTable("ProductCatalog");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = false,
                            Name = "Áo"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            Name = "Quần"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = false,
                            Name = "Váy"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = false,
                            Name = "Áo thun",
                            ParentID = 1
                        },
                        new
                        {
                            Id = 5,
                            IsActive = false,
                            Name = "Áo sơ mi",
                            ParentID = 1
                        },
                        new
                        {
                            Id = 6,
                            IsActive = false,
                            Name = "Áo khoác",
                            ParentID = 1
                        },
                        new
                        {
                            Id = 7,
                            IsActive = false,
                            Name = "Quần tây",
                            ParentID = 2
                        },
                        new
                        {
                            Id = 8,
                            IsActive = false,
                            Name = "Quần jean",
                            ParentID = 2
                        },
                        new
                        {
                            Id = 9,
                            IsActive = false,
                            Name = "Quần kari",
                            ParentID = 2
                        },
                        new
                        {
                            Id = 10,
                            IsActive = false,
                            Name = "Quần short",
                            ParentID = 2
                        },
                        new
                        {
                            Id = 11,
                            IsActive = false,
                            Name = "Váy toàn thân",
                            ParentID = 3
                        },
                        new
                        {
                            Id = 12,
                            IsActive = false,
                            Name = "Váy quần",
                            ParentID = 3
                        });
                });

            modelBuilder.Entity("EShop.Server.Models.ProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromDay")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPurchased")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Helpful")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnHelpful")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComment");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PromotionPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SKU")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalSold")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductVersions");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersionAttribute", b =>
                {
                    b.Property<int>("AttributeValueID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductVersionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttributeValueID", "ProductVersionID");

                    b.HasIndex("ProductVersionID");

                    b.ToTable("ProductVersionAttributes");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductVersionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductVersionID");

                    b.ToTable("ProductVersionImage");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersionTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductVersionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagId", "ProductVersionID");

                    b.HasIndex("ProductVersionID");

                    b.ToTable("ProductVersionTags");
                });

            modelBuilder.Entity("EShop.Server.Models.SeedLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SeedLog");
                });

            modelBuilder.Entity("EShop.Server.Models.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BtnText")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SlideGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subtitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SlideGroupId");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("EShop.Server.Models.SlideGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SlideGroups");
                });

            modelBuilder.Entity("EShop.Server.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("EShop.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interests")
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("LookingFor")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassWord")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GHNApi.Model.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupportType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("GHNApi.Model.Province", b =>
                {
                    b.Property<int>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("TEXT");

                    b.HasKey("ProvinceID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("GHNApi.Model.Ward", b =>
                {
                    b.Property<string>("WardCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WardName")
                        .HasColumnType("TEXT");

                    b.HasKey("WardCode");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward");
                });

            modelBuilder.Entity("EShop.Server.Models.Address", b =>
                {
                    b.HasOne("EShop.Server.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GHNApi.Model.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardCode");

                    b.Navigation("Customer");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("EShop.Server.Models.AddressToShip", b =>
                {
                    b.HasOne("GHNApi.Model.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardCode");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("EShop.Server.Models.AttributeValue", b =>
                {
                    b.HasOne("EShop.Server.Models.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("EShop.Server.Models.Menu", b =>
                {
                    b.HasOne("EShop.Server.Models.MenuGroup", "MenuGroup")
                        .WithMany()
                        .HasForeignKey("MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuGroup");
                });

            modelBuilder.Entity("EShop.Server.Models.Order", b =>
                {
                    b.HasOne("EShop.Server.Models.AddressToShip", "AddressToShip")
                        .WithMany()
                        .HasForeignKey("AddressToShipId");

                    b.HasOne("EShop.Server.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Server.Models.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressToShip");

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EShop.Server.Models.OrderDetail", b =>
                {
                    b.HasOne("EShop.Server.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Server.Models.ProductVersion", "ProductVersion")
                        .WithMany()
                        .HasForeignKey("ProductVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVersion");
                });

            modelBuilder.Entity("EShop.Server.Models.Photo", b =>
                {
                    b.HasOne("EShop.Server.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EShop.Server.Models.Product", b =>
                {
                    b.HasOne("EShop.Server.Models.ProductCatalog", "Catalog")
                        .WithMany("Products")
                        .HasForeignKey("CatalogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductCatalog", b =>
                {
                    b.HasOne("EShop.Server.Models.ProductCatalog", "Parent")
                        .WithMany("ChildCatalogs")
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductComment", b =>
                {
                    b.HasOne("EShop.Server.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Server.Models.ProductComment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentId");

                    b.HasOne("EShop.Server.Models.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ParentComment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersion", b =>
                {
                    b.HasOne("EShop.Server.Models.Product", "Product")
                        .WithMany("ProductVersions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersionAttribute", b =>
                {
                    b.HasOne("EShop.Server.Models.AttributeValue", "AttributeValue")
                        .WithMany("ProductVersionAttributes")
                        .HasForeignKey("AttributeValueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Server.Models.ProductVersion", "ProductVersion")
                        .WithMany("ProductVersionAttributes")
                        .HasForeignKey("ProductVersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("ProductVersion");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersionImage", b =>
                {
                    b.HasOne("EShop.Server.Models.ProductVersion", "ProductVersion")
                        .WithMany("ProductVersionImages")
                        .HasForeignKey("ProductVersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVersion");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersionTag", b =>
                {
                    b.HasOne("EShop.Server.Models.ProductVersion", "ProductVersion")
                        .WithMany("ProductVersionTags")
                        .HasForeignKey("ProductVersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Server.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVersion");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EShop.Server.Models.Slide", b =>
                {
                    b.HasOne("EShop.Server.Models.SlideGroup", "SlideGroup")
                        .WithMany()
                        .HasForeignKey("SlideGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlideGroup");
                });

            modelBuilder.Entity("GHNApi.Model.District", b =>
                {
                    b.HasOne("GHNApi.Model.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("GHNApi.Model.Ward", b =>
                {
                    b.HasOne("GHNApi.Model.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("EShop.Server.Models.AttributeValue", b =>
                {
                    b.Navigation("ProductVersionAttributes");
                });

            modelBuilder.Entity("EShop.Server.Models.Customer", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EShop.Server.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EShop.Server.Models.Product", b =>
                {
                    b.Navigation("ProductComments");

                    b.Navigation("ProductVersions");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductCatalog", b =>
                {
                    b.Navigation("ChildCatalogs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductComment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("EShop.Server.Models.ProductVersion", b =>
                {
                    b.Navigation("ProductVersionAttributes");

                    b.Navigation("ProductVersionImages");

                    b.Navigation("ProductVersionTags");
                });

            modelBuilder.Entity("EShop.Server.Models.User", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
